---
- name: "clone project"
  git:
    repo: "{{ repo_url }}"
    version: "{{ git_ref }}"
    dest: "{{ project_path }}"
    accept_hostkey: yes
    force: yes
  remote_user: "{{ deployer }}"


- name: "install tool versions"
  command: bash -lc 'asdf install' chdir="{{ project_path }}"
  async: 1800
  remote_user: "{{ deployer }}"

# Run two times - work around bug in asdf-erlang
# see: https://github.com/asdf-vm/asdf-erlang/issues/57
- name: "install tool versions"
  command: bash -lc 'asdf install' chdir="{{ project_path }}"
  async: 1800
  remote_user: "{{ deployer }}"


- name: "generate secret key base"
  command: "openssl rand -base64 {{ secret_key_base_length }}"
  register: openssl_random_string


- name: set secret_key_base
  set_fact: secret_key_base="{{ openssl_random_string.stdout }}"


- name: detect endpoint module
  command: grep -m 1 -o '{{ endpoint_regex }}' {{ project_path }}/config/dev.exs
  register: grep_endpoint_module


- name: set app_endpoint_module fact
  set_fact: app_endpoint_module="{{ grep_endpoint_module.stdout }}"


- name: detect repo module
  command: grep -m 1 -o '{{ repo_regex }}' {{ project_path }}/config/dev.exs
  register: grep_repo_module
  tags:
    - debug

- name: set app_repo_module fact
  set_fact: app_repo_module="{{ grep_repo_module.stdout }}"


- name: "check if custom template for {{ mix_env }}.secret.exs exists in project"
  local_action: stat path="templates/mix_env.secret.exs.j2"
  register: custom_secrets_file_template


- when: custom_secrets_file_template.stat.exists == False
  name: "add {{ mix_env }}.secret.exs from default template"
  template:
    src: default-mix_env.secret.exs.j2
    dest: "{{ project_path }}/config/{{ mix_env }}.secret.exs"
  remote_user: "{{ deployer }}"


- when: custom_secrets_file_template.stat.exists == True
  name: "add {{ mix_env }}.secret.exs from custom template provided"
  template:
    src: templates/mix_env.secret.exs.j2
    dest: "{{ project_path }}/config/{{ mix_env }}.secret.exs"
  remote_user: "{{ deployer }}"


- name: "copy google could key file"
  decrypt: yes
  copy:
    src: files/planprop-server-project-7dc947477b98.json.encrypted
    dest: "{{ project_path }}/config/planprop-server-project-7dc947477b98.json"
  remote_user: "{{ deployer }}"


- name: install hex
  command: bash -lc "mix local.hex --force" chdir="{{ project_path }}"
  remote_user: "{{ deployer }}"
  environment:
    MIX_ENV: "{{ mix_env }}"


- name: install rebar
  command: bash -lc "mix local.rebar --force" chdir="{{ project_path }}"
  remote_user: "{{ deployer }}"
  environment:
    MIX_ENV: "{{ mix_env }}"


- name: "fetch mix dependencies"
  command: bash -lc 'mix deps.get' chdir="{{ project_path }}"
  async: 900
  remote_user: "{{ deployer }}"
  environment:
    MIX_ENV: "{{ mix_env }}"


- name: "create empty application log file"
  copy:
    content: ""
    dest: "/var/log/{{ app_name }}.log"
    force: no
    owner: "{{ deployer }}"
    group: adm
    mode: 0640
